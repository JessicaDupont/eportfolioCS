// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eportfolioCS.DAL;

#nullable disable

namespace eportfolioCS.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eportfolioCS.DAL.Entities.CategorieEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentID")
                        .IsUnique()
                        .HasFilter("[ParentID] IS NOT NULL");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.EtablissementEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Etablissement");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.ExperienceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategorieID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("DateTime2")
                        .HasColumnName("date_debut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("DateTime2")
                        .HasColumnName("date_fin");

                    b.Property<int>("FirmeID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategorieID");

                    b.HasIndex("FirmeID");

                    b.HasIndex("ParentID")
                        .IsUnique()
                        .HasFilter("[ParentID] IS NOT NULL");

                    b.HasIndex("TexteID");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.FrameworkEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("LangageID")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LangageID");

                    b.HasIndex("ParentID")
                        .IsUnique()
                        .HasFilter("[ParentID] IS NOT NULL");

                    b.HasIndex("TexteID");

                    b.ToTable("Framework");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.FrameworkProjetEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("FrameworkID")
                        .HasColumnType("int");

                    b.Property<int>("IdeID")
                        .HasColumnType("int");

                    b.Property<int>("ProjetID")
                        .HasColumnType("int");

                    b.Property<int?>("SgbdID")
                        .HasColumnType("int");

                    b.Property<string>("VersionFramework")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionIDE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FrameworkID");

                    b.HasIndex("IdeID");

                    b.HasIndex("ProjetID");

                    b.HasIndex("SgbdID");

                    b.ToTable("framework_projet");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.IdeEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TexteID");

                    b.ToTable("IDE");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.LangageEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("AnneeCreation")
                        .HasColumnType("DateTime2")
                        .HasColumnName("annee_creation");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TexteID");

                    b.ToTable("Langage");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.ProjetEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("DateTime2")
                        .HasColumnName("date_debut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("DateTime2")
                        .HasColumnName("date_fin");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceID")
                        .HasColumnType("int");

                    b.Property<string>("GitURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeProjetID")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ExperienceID");

                    b.HasIndex("TexteID");

                    b.HasIndex("TypeProjetID");

                    b.ToTable("Projet");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.SgbdEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TexteID");

                    b.ToTable("SGBD");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.TexteEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PieceJointe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("TextePrecedentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TextePrecedentID")
                        .IsUnique()
                        .HasFilter("[TextePrecedentID] IS NOT NULL");

                    b.ToTable("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.TypeProjetEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TexteID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TexteID");

                    b.ToTable("Type_Projet");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.CategorieEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.CategorieEntity", "Parent")
                        .WithOne("Enfant")
                        .HasForeignKey("eportfolioCS.DAL.Entities.CategorieEntity", "ParentID");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.ExperienceEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.CategorieEntity", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eportfolioCS.DAL.Entities.EtablissementEntity", "Firme")
                        .WithMany()
                        .HasForeignKey("FirmeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eportfolioCS.DAL.Entities.ExperienceEntity", "Parent")
                        .WithOne("Enfant")
                        .HasForeignKey("eportfolioCS.DAL.Entities.ExperienceEntity", "ParentID");

                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Categorie");

                    b.Navigation("Firme");

                    b.Navigation("Parent");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.FrameworkEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.LangageEntity", "Langage")
                        .WithMany()
                        .HasForeignKey("LangageID");

                    b.HasOne("eportfolioCS.DAL.Entities.FrameworkEntity", "Parent")
                        .WithOne("Enfant")
                        .HasForeignKey("eportfolioCS.DAL.Entities.FrameworkEntity", "ParentID");

                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Langage");

                    b.Navigation("Parent");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.FrameworkProjetEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.FrameworkEntity", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eportfolioCS.DAL.Entities.IdeEntity", "IDE")
                        .WithMany()
                        .HasForeignKey("IdeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eportfolioCS.DAL.Entities.ProjetEntity", "Projet")
                        .WithMany()
                        .HasForeignKey("ProjetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eportfolioCS.DAL.Entities.SgbdEntity", "SGBD")
                        .WithMany()
                        .HasForeignKey("SgbdID");

                    b.Navigation("Framework");

                    b.Navigation("IDE");

                    b.Navigation("Projet");

                    b.Navigation("SGBD");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.IdeEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.LangageEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.ProjetEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.ExperienceEntity", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceID");

                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.HasOne("eportfolioCS.DAL.Entities.TypeProjetEntity", "TypeProjet")
                        .WithMany()
                        .HasForeignKey("TypeProjetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("Texte");

                    b.Navigation("TypeProjet");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.SgbdEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.TexteEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "TextePrecedent")
                        .WithOne("TexteSuivant")
                        .HasForeignKey("eportfolioCS.DAL.Entities.TexteEntity", "TextePrecedentID");

                    b.Navigation("TextePrecedent");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.TypeProjetEntity", b =>
                {
                    b.HasOne("eportfolioCS.DAL.Entities.TexteEntity", "Texte")
                        .WithMany()
                        .HasForeignKey("TexteID");

                    b.Navigation("Texte");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.CategorieEntity", b =>
                {
                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.ExperienceEntity", b =>
                {
                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.FrameworkEntity", b =>
                {
                    b.Navigation("Enfant");
                });

            modelBuilder.Entity("eportfolioCS.DAL.Entities.TexteEntity", b =>
                {
                    b.Navigation("TexteSuivant");
                });
#pragma warning restore 612, 618
        }
    }
}
